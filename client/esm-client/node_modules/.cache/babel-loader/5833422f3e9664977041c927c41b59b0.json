{"ast":null,"code":"var _jsxFileName = \"D:\\\\Final year project\\\\project_repo\\\\EduSync\\\\client\\\\esm-client\\\\src\\\\dashboard\\\\ResultCard.js\";\nimport React, { useEffect } from \"react\";\nimport \"./TestCard.css\";\nimport { HiOutlineClipboardList, HiClipboardCopy } from \"react-icons/hi\";\nimport { fetchAttemptTests } from \"../actions/testActions\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Skeleton } from \"antd\";\n\nfunction ResultCard(props) {\n  let {\n    tests,\n    isLoading,\n    profileID,\n    trimLength\n  } = props;\n  if (tests) tests = tests.length > trimLength ? tests.slice(-trimLength).reverse() : tests;\n  useEffect(() => {\n    props.fetchTests(profileID);\n    console.log(\"fired\");\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"left__header__text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HiOutlineClipboardList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }\n  }), \"Recently Attempted Tests\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left__body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, !isLoading && tests ? /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"left__body__list__ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, tests.map((test, index) => /*#__PURE__*/React.createElement(Link, {\n    to: \"/result\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"left__body__test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test__index\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"index__box \",\n    style: {\n      backgroundColor: \"#1e90ff\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, index + 1)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test__name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }\n  }, \" \", test.testName), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test__icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(HiClipboardCopy, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  })))))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"skeleton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, Array(trimLength).fill().map((item, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"single-skeleton\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Skeleton.Avatar, {\n    className: \"avatar-skelton\",\n    active: true,\n    size: \"default\",\n    shape: \"square\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Skeleton.Input, {\n    className: \"input-skelton\",\n    active: true,\n    size: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }\n  }))))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.tests.isLoadingAttemptedTest,\n    tests: state.tests.attemptedTest,\n    profileID: state.auth.profileID\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchTests: profileID => dispatch(fetchAttemptTests(profileID))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultCard);","map":{"version":3,"sources":["D:/Final year project/project_repo/EduSync/client/esm-client/src/dashboard/ResultCard.js"],"names":["React","useEffect","HiOutlineClipboardList","HiClipboardCopy","fetchAttemptTests","connect","Link","Skeleton","ResultCard","props","tests","isLoading","profileID","trimLength","length","slice","reverse","fetchTests","console","log","map","test","index","backgroundColor","testName","Array","fill","item","i","mapStateToProps","state","isLoadingAttemptedTest","attemptedTest","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./TestCard.css\";\r\nimport { HiOutlineClipboardList, HiClipboardCopy } from \"react-icons/hi\";\r\nimport { fetchAttemptTests } from \"../actions/testActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Skeleton } from \"antd\";\r\n\r\nfunction ResultCard(props) {\r\n  let { tests, isLoading, profileID, trimLength } = props;\r\n  if (tests)\r\n    tests =\r\n      tests.length > trimLength ? tests.slice(-trimLength).reverse() : tests;\r\n\r\n  useEffect(() => {\r\n    props.fetchTests(profileID);\r\n    console.log(\"fired\");\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"left__header\">\r\n        <p className=\"left__header__text\">\r\n          {<HiOutlineClipboardList />}Recently Attempted Tests\r\n        </p>\r\n      </div>\r\n      <div className=\"left__body\">\r\n        {!isLoading && tests ? (\r\n          <ul className=\"left__body__list__ul\">\r\n            {tests.map((test, index) => (\r\n              <Link to=\"/result\" key={index}>\r\n                <li className=\"left__body__test\">\r\n                  <div className=\"test__index\">\r\n                    <p\r\n                      className=\"index__box \"\r\n                      style={{ backgroundColor: \"#1e90ff\" }}\r\n                    >\r\n                      {index + 1}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"test__name\"> {test.testName}</div>\r\n                  <div className=\"test__icon\">\r\n                    <HiClipboardCopy />\r\n                  </div>\r\n                </li>\r\n              </Link>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <div className=\"skeleton\">\r\n            {Array(trimLength)\r\n              .fill()\r\n              .map((item, i) => (\r\n                <div className=\"single-skeleton\" key={i}>\r\n                  <Skeleton.Avatar\r\n                    className=\"avatar-skelton\"\r\n                    active={true}\r\n                    size=\"default\"\r\n                    shape=\"square\"\r\n                  />\r\n                  <Skeleton.Input\r\n                    className=\"input-skelton\"\r\n                    active={true}\r\n                    size=\"default\"\r\n                  />\r\n                </div>\r\n              ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoading: state.tests.isLoadingAttemptedTest,\r\n    tests: state.tests.attemptedTest,\r\n    profileID: state.auth.profileID,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchTests: (profileID) => dispatch(fetchAttemptTests(profileID)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultCard);\r\n"]},"metadata":{},"sourceType":"module"}