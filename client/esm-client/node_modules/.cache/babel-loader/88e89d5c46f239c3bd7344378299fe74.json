{"ast":null,"code":"var _jsxFileName = \"D:\\\\Final year project\\\\project_repo\\\\EduSync\\\\client\\\\esm-client\\\\src\\\\testPreview\\\\TestPreview.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateTimeSpentByStudent } from \"../actions/attemptTestActions\";\nimport Counter from \"./Counter\";\nimport HandleLiveTest from \"./HandleLiveTest\";\n\nclass TestPreview extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      testName: this.props.selectedTest.testName,\n      minutes: this.props.selectedTest.minutes,\n      _id: this.props.selectedTest._id,\n      intervalId: null,\n      timer: this.props.timer\n    };\n\n    this.handleCounter = () => {\n      this.clickChild();\n    };\n  }\n\n  componentDidMount() {\n    this.loadData(this.state._id);\n    const intervalID = setInterval(this.loadData.bind(this), 60000);\n    this.setState({\n      intervalId: intervalID,\n      timer: this.state.timer\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId);\n  }\n\n  loadData() {\n    try {\n      //   let testName, minutes, _id;\n      let testName, tM, _id, rM;\n\n      if (JSON.parse(localStorage.getItem(this.state._id)) === null) {\n        testName = this.state.testName;\n        tM = this.state.minutes;\n        _id = this.state._id;\n        rM = tM;\n        localStorage.setItem(`${_id}`, JSON.stringify({\n          testName,\n          _id,\n          tM,\n          rM\n        }));\n      } else {\n        const testData = JSON.parse(localStorage.getItem(`${this.state._id}`));\n        let {\n          testName,\n          tM,\n          _id,\n          rM\n        } = testData;\n        rM = rM - 1;\n        localStorage.setItem(`${_id}`, JSON.stringify({\n          testName,\n          _id,\n          tM,\n          rM\n        }));\n      } //   const profileID = localStorage.getItem(\"profileID\"),\n      //     completed = false;\n      //   const testData = JSON.parse(localStorage.getItem(\"trash\"));\n      //   let updatingAttemptedMinutes = localStorage.getItem(testData._id);\n      //   const data = {\n      //     profileID,\n      //     testName,\n      //     _id,\n      //     completed,\n      //     minutes,\n      //     updatingAttemptedMinutes,\n      //   };\n      //   //console.log(this.props.selectedTest, \"props\")\n      //   if (_id) {\n      //    // this.props.updateTimer(data);\n      //   }\n\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Counter, {\n      testID: this.state._id,\n      totalMinutes: this.state.minutes,\n      handleCounter: this.handleCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(HandleLiveTest, {\n      testID: this.state._id,\n      totalMinutes: this.state.minutes,\n      testName: this.state.testName,\n      testName: this.state.testName,\n      totalMinutes: this.state.minutes,\n      counterEnd: click => this.clickChild = click,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedTest: state.selectedTest.selectedTestData,\n    timer: state.userAttemptedTime.attemptedTime\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateTimer: data => dispatch(updateTimeSpentByStudent(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestPreview);","map":{"version":3,"sources":["D:/Final year project/project_repo/EduSync/client/esm-client/src/testPreview/TestPreview.js"],"names":["React","Component","connect","updateTimeSpentByStudent","Counter","HandleLiveTest","TestPreview","state","testName","props","selectedTest","minutes","_id","intervalId","timer","handleCounter","clickChild","componentDidMount","loadData","intervalID","setInterval","bind","setState","componentWillUnmount","clearInterval","tM","rM","JSON","parse","localStorage","getItem","setItem","stringify","testData","e","console","log","render","click","mapStateToProps","selectedTestData","userAttemptedTime","attemptedTime","mapDispatchToProps","dispatch","updateTimer","data"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateTimeSpentByStudent } from \"../actions/attemptTestActions\";\r\nimport Counter from \"./Counter\";\r\nimport HandleLiveTest from \"./HandleLiveTest\";\r\n\r\nclass TestPreview extends Component {\r\n  state = {\r\n    testName: this.props.selectedTest.testName,\r\n    minutes: this.props.selectedTest.minutes,\r\n    _id: this.props.selectedTest._id,\r\n    intervalId: null,\r\n    timer: this.props.timer,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadData(this.state._id);\r\n    const intervalID = setInterval(this.loadData.bind(this), 60000);\r\n    this.setState({ intervalId: intervalID, timer: this.state.timer });\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.intervalId);\r\n  }\r\n  handleCounter =()=>{\r\n    this.clickChild();\r\n  }\r\n\r\n  loadData() {\r\n    try {\r\n      //   let testName, minutes, _id;\r\n      let testName, tM, _id, rM;\r\n      if (JSON.parse(localStorage.getItem(this.state._id)) === null) {\r\n        testName = this.state.testName;\r\n        tM = this.state.minutes;\r\n        _id = this.state._id;\r\n        rM = tM;\r\n        localStorage.setItem(\r\n          `${_id}`,\r\n          JSON.stringify({ testName, _id, tM, rM })\r\n        );\r\n      } else {\r\n        const testData = JSON.parse(localStorage.getItem(`${this.state._id}`));\r\n\r\n        let { testName, tM, _id, rM } = testData;\r\n        rM = rM - 1;\r\n        localStorage.setItem(\r\n          `${_id}`,\r\n          JSON.stringify({ testName, _id, tM, rM })\r\n        );\r\n      }\r\n\r\n      //   const profileID = localStorage.getItem(\"profileID\"),\r\n      //     completed = false;\r\n      //   const testData = JSON.parse(localStorage.getItem(\"trash\"));\r\n      //   let updatingAttemptedMinutes = localStorage.getItem(testData._id);\r\n\r\n      //   const data = {\r\n      //     profileID,\r\n      //     testName,\r\n      //     _id,\r\n      //     completed,\r\n      //     minutes,\r\n      //     updatingAttemptedMinutes,\r\n      //   };\r\n      //   //console.log(this.props.selectedTest, \"props\")\r\n      //   if (_id) {\r\n      //    // this.props.updateTimer(data);\r\n      //   }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  \r\n \r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Counter testID={this.state._id} totalMinutes={this.state.minutes} handleCounter ={this.handleCounter}/>\r\n        <HandleLiveTest\r\n          testID={this.state._id}\r\n          totalMinutes={this.state.minutes}\r\n          testName={this.state.testName}\r\n          testName={this.state.testName}\r\n          totalMinutes={this.state.minutes}\r\n          counterEnd ={click => this.clickChild = click}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedTest: state.selectedTest.selectedTestData,\r\n    timer: state.userAttemptedTime.attemptedTime,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateTimer: (data) => dispatch(updateTimeSpentByStudent(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestPreview);\r\n"]},"metadata":{},"sourceType":"module"}