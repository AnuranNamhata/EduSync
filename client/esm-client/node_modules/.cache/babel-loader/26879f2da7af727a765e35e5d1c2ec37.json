{"ast":null,"code":"import { logoutUser } from \"./authActions\";\nexport const SUBMIT_TEST_REQUEST = \"SUBMIT_TEST_REQUEST\";\nexport const SUBMIT_TEST_SUCCESS = \"SUBMIT_TEST_SUCCESS\";\nexport const SUBMIT_TEST_FAILURE = \"SUBMIT_TEST_FAILURE\";\nexport const ASSIGNED_TEST_REQUEST = \"ASSIGNED_TEST_REQUEST\";\nexport const ASSIGNED_TEST_SUCCESS = \"ASSIGNED_TEST_SUCCESS\";\nexport const ASSIGNED_TEST_FAILURE = \"ASSIGNED_TEST_FAILURE\";\nexport const SET_TEST_CREATED_FALSE = \"SET_TEST_CREATED_FALSE\";\nconst requestSubmitTest = () => {\n  return {\n    type: SUBMIT_TEST_REQUEST\n  };\n};\nconst receiveSubmitTest = (user, profileID) => {\n  return {\n    type: SUBMIT_TEST_SUCCESS\n  };\n};\nconst submitTestError = () => {\n  return {\n    type: SUBMIT_TEST_FAILURE\n  };\n};\nconst requestAssignedTest = () => {\n  return {\n    type: ASSIGNED_TEST_REQUEST\n  };\n};\nconst receiveAssignedTest = tests => {\n  return {\n    type: ASSIGNED_TEST_SUCCESS,\n    tests\n  };\n};\nconst AssignedTestError = () => {\n  return {\n    type: ASSIGNED_TEST_FAILURE\n  };\n};\nconst setTestCreatedFalse = () => {\n  return {\n    type: SET_TEST_CREATED_FALSE\n  };\n};\nexport const submitTest = values => dispatch => {\n  console.log(values);\n  dispatch(requestSubmitTest());\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    },\n    body: JSON.stringify(values)\n  };\n  //console.log(\"Success:\", values);\n  fetch(\"/teacher/create-test\", requestOptions).then(response => response.json()).then(data => {\n    var _data$error;\n    if ((data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.name) === \"TokenExpiredError\") {\n      dispatch(logoutUser());\n    } else {\n      dispatch(receiveSubmitTest(data.user));\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n    dispatch(submitTestError());\n  });\n};\nexport const fetchAssignedTests = profileID => async dispatch => {\n  dispatch(requestAssignedTest());\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    }\n  };\n  await fetch(`/teacher/tests/${profileID}`, requestOptions).then(response => response.json()).then(data => {\n    if (data) {\n      var _data$error2;\n      if ((data === null || data === void 0 ? void 0 : (_data$error2 = data.error) === null || _data$error2 === void 0 ? void 0 : _data$error2.name) === \"TokenExpiredError\") {\n        dispatch(logoutUser());\n      } else {\n        dispatch(receiveAssignedTest(data.obj));\n      }\n      // history.push(\"/studentHome\");\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n    dispatch(AssignedTestError());\n  });\n};\nexport const testCreatedFalse = () => async dispatch => {\n  dispatch(setTestCreatedFalse());\n};","map":{"version":3,"names":["logoutUser","SUBMIT_TEST_REQUEST","SUBMIT_TEST_SUCCESS","SUBMIT_TEST_FAILURE","ASSIGNED_TEST_REQUEST","ASSIGNED_TEST_SUCCESS","ASSIGNED_TEST_FAILURE","SET_TEST_CREATED_FALSE","requestSubmitTest","type","receiveSubmitTest","user","profileID","submitTestError","requestAssignedTest","receiveAssignedTest","tests","AssignedTestError","setTestCreatedFalse","submitTest","values","dispatch","console","log","requestOptions","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","fetch","then","response","json","data","_data$error","error","name","catch","fetchAssignedTests","_data$error2","obj","testCreatedFalse"],"sources":["D:/Final year project/project_repo/EduSync/client/esm-client/src/actions/TeacherActions.js"],"sourcesContent":["import { logoutUser } from \"./authActions\";\r\nexport const SUBMIT_TEST_REQUEST = \"SUBMIT_TEST_REQUEST\";\r\nexport const SUBMIT_TEST_SUCCESS = \"SUBMIT_TEST_SUCCESS\";\r\nexport const SUBMIT_TEST_FAILURE = \"SUBMIT_TEST_FAILURE\";\r\n\r\nexport const ASSIGNED_TEST_REQUEST = \"ASSIGNED_TEST_REQUEST\";\r\nexport const ASSIGNED_TEST_SUCCESS = \"ASSIGNED_TEST_SUCCESS\";\r\nexport const ASSIGNED_TEST_FAILURE = \"ASSIGNED_TEST_FAILURE\";\r\n\r\nexport const SET_TEST_CREATED_FALSE = \"SET_TEST_CREATED_FALSE\";\r\n\r\nconst requestSubmitTest = () => {\r\n  return {\r\n    type: SUBMIT_TEST_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveSubmitTest = (user, profileID) => {\r\n  return {\r\n    type: SUBMIT_TEST_SUCCESS,\r\n  };\r\n};\r\n\r\nconst submitTestError = () => {\r\n  return {\r\n    type: SUBMIT_TEST_FAILURE,\r\n  };\r\n};\r\n\r\nconst requestAssignedTest = () => {\r\n  return {\r\n    type: ASSIGNED_TEST_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveAssignedTest = (tests) => {\r\n  return {\r\n    type: ASSIGNED_TEST_SUCCESS,\r\n    tests,\r\n  };\r\n};\r\n\r\nconst AssignedTestError = () => {\r\n  return {\r\n    type: ASSIGNED_TEST_FAILURE,\r\n  };\r\n};\r\n\r\nconst setTestCreatedFalse = () => {\r\n  return {\r\n    type: SET_TEST_CREATED_FALSE,\r\n  };\r\n};\r\n\r\nexport const submitTest = (values) => (dispatch) => {\r\n  console.log(values);\r\n\r\n  dispatch(requestSubmitTest());\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n\r\n    body: JSON.stringify(values),\r\n  };\r\n  //console.log(\"Success:\", values);\r\n  fetch(\"/teacher/create-test\", requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data?.error?.name === \"TokenExpiredError\") {\r\n        dispatch(logoutUser());\r\n      } else {\r\n        dispatch(receiveSubmitTest(data.user));\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error);\r\n      dispatch(submitTestError());\r\n    });\r\n};\r\n\r\nexport const fetchAssignedTests = (profileID) => async (dispatch) => {\r\n  dispatch(requestAssignedTest());\r\n\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n  };\r\n\r\n  await fetch(`/teacher/tests/${profileID}`, requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data) {\r\n        if (data?.error?.name === \"TokenExpiredError\") {\r\n          dispatch(logoutUser());\r\n        } else {\r\n          dispatch(receiveAssignedTest(data.obj));\r\n        }\r\n        // history.push(\"/studentHome\");\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error);\r\n      dispatch(AssignedTestError());\r\n    });\r\n};\r\n\r\nexport const testCreatedFalse = () => async (dispatch) => {\r\n  dispatch(setTestCreatedFalse());\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}