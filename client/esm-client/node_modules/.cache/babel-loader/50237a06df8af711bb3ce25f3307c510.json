{"ast":null,"code":"import { logoutUser } from \"./authActions\";\nexport const SUBMIT_TEST_REQUEST = \"SUBMIT_TEST_REQUEST\";\nexport const SUBMIT_TEST_SUCCESS = \"SUBMIT_TEST_SUCCESS\";\nexport const SUBMIT_TEST_FAILURE = \"SUBMIT_TEST_FAILURE\";\nexport const ASSIGNED_TEST_REQUEST = \"ASSIGNED_TEST_REQUEST\";\nexport const ASSIGNED_TEST_SUCCESS = \"ASSIGNED_TEST_SUCCESS\";\nexport const ASSIGNED_TEST_FAILURE = \"ASSIGNED_TEST_FAILURE\";\nexport const SET_TEST_CREATED_FALSE = \"SET_TEST_CREATED_FALSE\";\n\nconst requestSubmitTest = () => {\n  return {\n    type: SUBMIT_TEST_REQUEST\n  };\n};\n\nconst receiveSubmitTest = (user, profileID) => {\n  return {\n    type: SUBMIT_TEST_SUCCESS\n  };\n};\n\nconst submitTestError = () => {\n  return {\n    type: SUBMIT_TEST_FAILURE\n  };\n};\n\nconst requestAssignedTest = () => {\n  return {\n    type: ASSIGNED_TEST_REQUEST\n  };\n};\n\nconst receiveAssignedTest = tests => {\n  return {\n    type: ASSIGNED_TEST_SUCCESS,\n    tests\n  };\n};\n\nconst AssignedTestError = () => {\n  return {\n    type: ASSIGNED_TEST_FAILURE\n  };\n};\n\nconst setTestCreatedFalse = () => {\n  return {\n    type: SET_TEST_CREATED_FALSE\n  };\n};\n\nexport const submitTest = values => dispatch => {\n  console.log(values);\n  dispatch(requestSubmitTest());\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    },\n    body: JSON.stringify(values)\n  }; //console.log(\"Success:\", values);\n\n  fetch(\"/teacher/create-test\", requestOptions).then(response => response.json()).then(data => {\n    var _data$error;\n\n    if ((data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.name) === \"TokenExpiredError\") {\n      dispatch(logoutUser());\n    } else {\n      dispatch(receiveSubmitTest(data.user));\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n    dispatch(submitTestError());\n  });\n};\nexport const fetchAssignedTests = profileID => async dispatch => {\n  dispatch(requestAssignedTest());\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    }\n  };\n  await fetch(`/teacher/tests/${profileID}`, requestOptions).then(response => response.json()).then(data => {\n    if (data) {\n      var _data$error2;\n\n      if ((data === null || data === void 0 ? void 0 : (_data$error2 = data.error) === null || _data$error2 === void 0 ? void 0 : _data$error2.name) === \"TokenExpiredError\") {\n        dispatch(logoutUser());\n      } else {\n        dispatch(receiveAssignedTest(data.obj));\n      } // history.push(\"/studentHome\");\n\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n    dispatch(AssignedTestError());\n  });\n};\nexport const testCreatedFalse = () => async dispatch => {\n  dispatch(setTestCreatedFalse());\n};","map":{"version":3,"sources":["D:/Final year project/project_repo/EduSync/client/esm-client/src/actions/TeacherActions.js"],"names":["logoutUser","SUBMIT_TEST_REQUEST","SUBMIT_TEST_SUCCESS","SUBMIT_TEST_FAILURE","ASSIGNED_TEST_REQUEST","ASSIGNED_TEST_SUCCESS","ASSIGNED_TEST_FAILURE","SET_TEST_CREATED_FALSE","requestSubmitTest","type","receiveSubmitTest","user","profileID","submitTestError","requestAssignedTest","receiveAssignedTest","tests","AssignedTestError","setTestCreatedFalse","submitTest","values","dispatch","console","log","requestOptions","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","fetch","then","response","json","data","error","name","catch","fetchAssignedTests","obj","testCreatedFalse"],"mappings":"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","sourcesContent":["import { logoutUser } from \"./authActions\";\r\nexport const SUBMIT_TEST_REQUEST = \"SUBMIT_TEST_REQUEST\";\r\nexport const SUBMIT_TEST_SUCCESS = \"SUBMIT_TEST_SUCCESS\";\r\nexport const SUBMIT_TEST_FAILURE = \"SUBMIT_TEST_FAILURE\";\r\n\r\nexport const ASSIGNED_TEST_REQUEST = \"ASSIGNED_TEST_REQUEST\";\r\nexport const ASSIGNED_TEST_SUCCESS = \"ASSIGNED_TEST_SUCCESS\";\r\nexport const ASSIGNED_TEST_FAILURE = \"ASSIGNED_TEST_FAILURE\";\r\n\r\nexport const SET_TEST_CREATED_FALSE = \"SET_TEST_CREATED_FALSE\";\r\n\r\nconst requestSubmitTest = () => {\r\n  return {\r\n    type: SUBMIT_TEST_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveSubmitTest = (user, profileID) => {\r\n  return {\r\n    type: SUBMIT_TEST_SUCCESS,\r\n  };\r\n};\r\n\r\nconst submitTestError = () => {\r\n  return {\r\n    type: SUBMIT_TEST_FAILURE,\r\n  };\r\n};\r\n\r\nconst requestAssignedTest = () => {\r\n  return {\r\n    type: ASSIGNED_TEST_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveAssignedTest = (tests) => {\r\n  return {\r\n    type: ASSIGNED_TEST_SUCCESS,\r\n    tests,\r\n  };\r\n};\r\n\r\nconst AssignedTestError = () => {\r\n  return {\r\n    type: ASSIGNED_TEST_FAILURE,\r\n  };\r\n};\r\n\r\nconst setTestCreatedFalse = () => {\r\n  return {\r\n    type: SET_TEST_CREATED_FALSE,\r\n  };\r\n};\r\n\r\nexport const submitTest = (values) => (dispatch) => {\r\n  console.log(values);\r\n\r\n  dispatch(requestSubmitTest());\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n\r\n    body: JSON.stringify(values),\r\n  };\r\n  //console.log(\"Success:\", values);\r\n  fetch(\"/teacher/create-test\", requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data?.error?.name === \"TokenExpiredError\") {\r\n        dispatch(logoutUser());\r\n      } else {\r\n        dispatch(receiveSubmitTest(data.user));\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error);\r\n      dispatch(submitTestError());\r\n    });\r\n};\r\n\r\nexport const fetchAssignedTests = (profileID) => async (dispatch) => {\r\n  dispatch(requestAssignedTest());\r\n\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n  };\r\n\r\n  await fetch(`/teacher/tests/${profileID}`, requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data) {\r\n        if (data?.error?.name === \"TokenExpiredError\") {\r\n          dispatch(logoutUser());\r\n        } else {\r\n          dispatch(receiveAssignedTest(data.obj));\r\n        }\r\n        // history.push(\"/studentHome\");\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error);\r\n      dispatch(AssignedTestError());\r\n    });\r\n};\r\n\r\nexport const testCreatedFalse = () => async (dispatch) => {\r\n  dispatch(setTestCreatedFalse());\r\n};\r\n"]},"metadata":{},"sourceType":"module"}