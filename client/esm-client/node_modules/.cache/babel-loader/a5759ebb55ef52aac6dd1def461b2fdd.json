{"ast":null,"code":"import { logoutUser } from \"./authActions\";\nexport const UPDATE_ATTEMPT_TEST_REQUEST = \"UPDATE_ATTEMPT_TEST_REQUEST\";\nexport const UPDATE_ATTEMPT_TEST_SUCCESS = \"UPDATE_ATTEMPT_TEST_SUCCESS\";\nexport const UPDATE_ATTEMPT_TEST_FAILURE = \"UPDATE_ATTEMPT_TEST_FAILURE\";\n\nconst requestUpdateTimeSpent = () => {\n  return {\n    type: UPDATE_ATTEMPT_TEST_REQUEST\n  };\n};\n\nconst receiveUpdateTimeSpent = time => {\n  return {\n    type: UPDATE_ATTEMPT_TEST_SUCCESS,\n    time\n  };\n};\n\nconst updateTimeSpentError = () => {\n  return {\n    type: UPDATE_ATTEMPT_TEST_FAILURE\n  };\n};\n\nexport const updateTimeSpentByStudent = values => dispatch => {\n  dispatch(requestUpdateTimeSpent());\n  let {\n    profileID,\n    testName,\n    completed,\n    minutes: totalTime,\n    _id: testID,\n    updatingAttemptedMinutes\n  } = values;\n  updatingAttemptedMinutes = updatingAttemptedMinutes !== 0 ? updatingAttemptedMinutes : 0;\n  console.log(parseInt(updatingAttemptedMinutes));\n  let subtractTime = updatingAttemptedMinutes == 0 ? parseInt(totalTime) : parseInt(0);\n  let attemptedTime = Math.abs(subtractTime - parseInt(updatingAttemptedMinutes - 1));\n  const data = {\n    profileID,\n    testName,\n    completed,\n    attemptedTime,\n    totalTime\n  };\n  console.log(completed, totalTime, data.attemptedTime);\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    },\n    body: JSON.stringify(data)\n  };\n  fetch(`/student/update-test-status/${testID}`, requestOptions).then(response => response.json()).then(data => {\n    if (data) {\n      var _data$error;\n\n      if ((data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.name) === \"TokenExpiredError\") {\n        dispatch(logoutUser());\n      } else {\n        data.obj.testStatus.map((test, index) => {\n          if (test.testID === testID) {\n            localStorage.setItem(testID, test.attemptedTime);\n          }\n        });\n        console.log(data.obj);\n        dispatch(receiveUpdateTimeSpent(localStorage.getItem(testID)));\n      }\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n    dispatch(updateTimeSpentError());\n  });\n};","map":{"version":3,"sources":["D:/Final year project/project_repo/EduSync/client/esm-client/src/actions/attemptTestActions.js"],"names":["logoutUser","UPDATE_ATTEMPT_TEST_REQUEST","UPDATE_ATTEMPT_TEST_SUCCESS","UPDATE_ATTEMPT_TEST_FAILURE","requestUpdateTimeSpent","type","receiveUpdateTimeSpent","time","updateTimeSpentError","updateTimeSpentByStudent","values","dispatch","profileID","testName","completed","minutes","totalTime","_id","testID","updatingAttemptedMinutes","console","log","parseInt","subtractTime","attemptedTime","Math","abs","data","requestOptions","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","fetch","then","response","json","error","name","obj","testStatus","map","test","index","setItem","catch"],"mappings":"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","sourcesContent":["import { logoutUser } from \"./authActions\";\r\nexport const UPDATE_ATTEMPT_TEST_REQUEST = \"UPDATE_ATTEMPT_TEST_REQUEST\";\r\nexport const UPDATE_ATTEMPT_TEST_SUCCESS = \"UPDATE_ATTEMPT_TEST_SUCCESS\";\r\nexport const UPDATE_ATTEMPT_TEST_FAILURE = \"UPDATE_ATTEMPT_TEST_FAILURE\";\r\n\r\nconst requestUpdateTimeSpent = () => {\r\n  return {\r\n    type: UPDATE_ATTEMPT_TEST_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveUpdateTimeSpent = (time) => {\r\n  return {\r\n    type: UPDATE_ATTEMPT_TEST_SUCCESS,\r\n    time,\r\n  };\r\n};\r\n\r\nconst updateTimeSpentError = () => {\r\n  return {\r\n    type: UPDATE_ATTEMPT_TEST_FAILURE,\r\n  };\r\n};\r\n\r\nexport const updateTimeSpentByStudent = (values) => (dispatch) => {\r\n  dispatch(requestUpdateTimeSpent());\r\n  let {\r\n    profileID,\r\n    testName,\r\n    completed,\r\n    minutes: totalTime,\r\n    _id: testID,\r\n    updatingAttemptedMinutes,\r\n  } = values;\r\n\r\n  updatingAttemptedMinutes =\r\n    updatingAttemptedMinutes !== 0 ? updatingAttemptedMinutes : 0;\r\n  console.log(parseInt(updatingAttemptedMinutes));\r\n  let subtractTime =\r\n    updatingAttemptedMinutes == 0 ? parseInt(totalTime) : parseInt(0);\r\n\r\n  let attemptedTime = Math.abs(\r\n    subtractTime - parseInt(updatingAttemptedMinutes - 1)\r\n  );\r\n\r\n  const data = { profileID, testName, completed, attemptedTime, totalTime };\r\n  console.log(completed, totalTime, data.attemptedTime);\r\n\r\n  const requestOptions = {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n\r\n    body: JSON.stringify(data),\r\n  };\r\n\r\n  fetch(`/student/update-test-status/${testID}`, requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data) {\r\n        if (data?.error?.name === \"TokenExpiredError\") {\r\n          dispatch(logoutUser());\r\n        } else {\r\n          data.obj.testStatus.map((test, index) => {\r\n            if (test.testID === testID) {\r\n              localStorage.setItem(testID, test.attemptedTime);\r\n            }\r\n          });\r\n\r\n          console.log(data.obj);\r\n          dispatch(receiveUpdateTimeSpent(localStorage.getItem(testID)));\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error);\r\n      dispatch(updateTimeSpentError());\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}