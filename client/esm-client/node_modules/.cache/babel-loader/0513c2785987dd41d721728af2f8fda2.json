{"ast":null,"code":"export const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\nexport const VERIFY_REQUEST = \"VERIFY_REQUEST\";\nexport const VERIFY_SUCCESS = \"VERIFY_SUCCESS\";\nexport const SEND_PASS_RESET = \"SEND_PASS_RESET\";\nexport const SEND_PASS_RESET_ERROR = \"SEND_PASS_RESET_ERROR\";\nexport const SEND_PASS_RESET_SUCCESS = \"SEND_PASS_RESET_SUCCESS\";\nexport const USER_ACCOUNT_CREATED = \"USER_ACCOUNT_CREATED\";\n\nconst requestLogin = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\n\nconst receiveLogin = (user, profileID) => {\n  return {\n    type: LOGIN_SUCCESS,\n    user,\n    profileID\n  };\n};\n\nconst loginError = () => {\n  return {\n    type: LOGIN_FAILURE\n  };\n};\n\nconst requestsignup = () => {\n  return {\n    type: SIGN_UP_REQUEST\n  };\n};\n\nconst receiveSignup = user => {\n  return {\n    type: SIGN_UP_SUCCESS,\n    user\n  };\n};\n\nconst signupError = errMess => {\n  return {\n    type: SIGN_UP_FAILURE,\n    errMess\n  };\n};\n\nconst requestLogout = () => {\n  return {\n    type: LOGOUT_REQUEST\n  };\n};\n\nconst receiveLogout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\n\nconst logoutError = () => {\n  return {\n    type: LOGOUT_FAILURE\n  };\n};\n\nconst verifyRequest = () => {\n  return {\n    type: VERIFY_REQUEST\n  };\n};\n\nconst verifySuccess = () => {\n  return {\n    type: VERIFY_SUCCESS\n  };\n};\n\nconst sendingPassReset = () => {\n  return {\n    type: SEND_PASS_RESET\n  };\n};\n\nconst sendPassResetError = errMess => {\n  return {\n    type: SEND_PASS_RESET_ERROR,\n    errMess\n  };\n};\n\nconst sendPassResetSuccess = () => {\n  return {\n    type: SEND_PASS_RESET_SUCCESS\n  };\n};\n\nconst userAccountCreated = () => {\n  return {\n    type: USER_ACCOUNT_CREATED\n  };\n};\n\nexport const loginUser = values => dispatch => {\n  dispatch(requestLogin());\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    },\n    body: JSON.stringify(values)\n  };\n  fetch(\"/user/login\", requestOptions).then(response => response.json()).then(data => {\n    if (data.token) {\n      localStorage.setItem(\"token\", `Bearer ${data.token}`);\n      localStorage.setItem(\"userProfile\", JSON.stringify(data.payload.user));\n      localStorage.setItem(\"profileID\", data.payload.profileID);\n      dispatch(receiveLogin(data.payload.user, data.payload.profileID)); // history.push(\"/studentHome\");\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    dispatch(loginError());\n  });\n};\nexport const signUpUser = values => dispatch => {\n  dispatch(requestsignup());\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(values)\n  };\n  fetch(\"/user/signup\", requestOptions).then(response => response.json()).then(data => {\n    if (data.token) {\n      localStorage.setItem(\"token\", `Bearer ${data.token}`);\n      localStorage.setItem('userProfile', JSON.stringify(data.payload.user));\n      localStorage.setItem('profileID', data.payload.profileID);\n      dispatch(receiveSignup(data.user)); // history.push(\"/studentHome\");\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n    dispatch(signupError());\n  });\n};\nexport const accountCreated = () => dispatch => {\n  dispatch(userAccountCreated());\n}; // export const signupUser = (displayName, email, password, password2) => dispatch => {\n//   dispatch(requestsignup());\n//   //verifying password and name.\n//   if(displayName.length < 3){\n//     return dispatch(signupError(\"Name must have atleast 3 characters.\"));\n//   }\n//   if(displayName.length > 50){\n//     return dispatch(signupError(\"Name must have atmost 50 characters.\"));\n//   }\n//   if(!/^[a-zA-Z ]*$/.test(displayName)){\n//     return dispatch(signupError(\"Name must contain only alphabets.\"));\n//   }\n//   if(password !== password2){\n//     return dispatch(signupError(\"Passwords do not match\"));\n//   }\n// };\n\nexport const logoutUser = () => dispatch => {\n  dispatch(requestLogout());\n  dispatch(receiveLogout());\n}; // export const verifyAuth = () => dispatch => {\n//   dispatch(verifyRequest());\n//   myFirebase.auth().onAuthStateChanged(user => {\n//     if (user !== null) {\n//       dispatch(receiveLogin(user));\n//     }\n//     dispatch(verifySuccess());\n//   });\n// };\n// export const sendPasswordResetLink = (email) => dispatch => {\n//   dispatch(sendingPassReset());\n//   myFirebase.auth().sendPasswordResetEmail(email)\n//   .then(()=>{\n//     dispatch(sendPassResetSuccess());\n//   })\n//   .catch(error=>{\n//     console.error(error);\n//     switch(error.code){\n//       case 'auth/invalid-email':\n//         dispatch(sendPassResetError(\"Invalid email address.\"));\n//         break;\n//       case 'auth/user-not-found':\n//         dispatch(sendPassResetError(\"User not found with the given email address.\"));\n//         break;\n//       default:\n//         dispatch(sendPassResetError(\"Failed to send password reset email.\"));\n//     }\n//   })\n// }","map":{"version":3,"sources":["D:/Final year project/project_repo/EduSync/client/esm-client/src/actions/authActions.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","VERIFY_REQUEST","VERIFY_SUCCESS","SEND_PASS_RESET","SEND_PASS_RESET_ERROR","SEND_PASS_RESET_SUCCESS","USER_ACCOUNT_CREATED","requestLogin","type","receiveLogin","user","profileID","loginError","requestsignup","receiveSignup","signupError","errMess","requestLogout","receiveLogout","logoutError","verifyRequest","verifySuccess","sendingPassReset","sendPassResetError","sendPassResetSuccess","userAccountCreated","loginUser","values","dispatch","requestOptions","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","fetch","then","response","json","data","token","setItem","payload","catch","error","signUpUser","console","log","accountCreated","logoutUser"],"mappings":"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","sourcesContent":["export const LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\r\n\r\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\r\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\r\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\r\n\r\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\r\n\r\nexport const VERIFY_REQUEST = \"VERIFY_REQUEST\";\r\nexport const VERIFY_SUCCESS = \"VERIFY_SUCCESS\";\r\n\r\nexport const SEND_PASS_RESET = \"SEND_PASS_RESET\";\r\nexport const SEND_PASS_RESET_ERROR = \"SEND_PASS_RESET_ERROR\";\r\nexport const SEND_PASS_RESET_SUCCESS = \"SEND_PASS_RESET_SUCCESS\";\r\n\r\nexport const USER_ACCOUNT_CREATED = \"USER_ACCOUNT_CREATED\";\r\n\r\nconst requestLogin = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveLogin = (user, profileID) => {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    user,\r\n    profileID,\r\n  };\r\n};\r\n\r\nconst loginError = () => {\r\n  return {\r\n    type: LOGIN_FAILURE,\r\n  };\r\n};\r\n\r\nconst requestsignup = () => {\r\n  return {\r\n    type: SIGN_UP_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveSignup = (user) => {\r\n  return {\r\n    type: SIGN_UP_SUCCESS,\r\n    user,\r\n  };\r\n};\r\n\r\nconst signupError = (errMess) => {\r\n  return {\r\n    type: SIGN_UP_FAILURE,\r\n    errMess,\r\n  };\r\n};\r\n\r\nconst requestLogout = () => {\r\n  return {\r\n    type: LOGOUT_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveLogout = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS,\r\n  };\r\n};\r\n\r\nconst logoutError = () => {\r\n  return {\r\n    type: LOGOUT_FAILURE,\r\n  };\r\n};\r\n\r\nconst verifyRequest = () => {\r\n  return {\r\n    type: VERIFY_REQUEST,\r\n  };\r\n};\r\n\r\nconst verifySuccess = () => {\r\n  return {\r\n    type: VERIFY_SUCCESS,\r\n  };\r\n};\r\n\r\nconst sendingPassReset = () => {\r\n  return {\r\n    type: SEND_PASS_RESET,\r\n  };\r\n};\r\n\r\nconst sendPassResetError = (errMess) => {\r\n  return {\r\n    type: SEND_PASS_RESET_ERROR,\r\n    errMess,\r\n  };\r\n};\r\n\r\nconst sendPassResetSuccess = () => {\r\n  return {\r\n    type: SEND_PASS_RESET_SUCCESS,\r\n  };\r\n};\r\n\r\nconst userAccountCreated = () => {\r\n  return {\r\n    type: USER_ACCOUNT_CREATED,\r\n  };\r\n};\r\n\r\nexport const loginUser = (values) => (dispatch) => {\r\n  dispatch(requestLogin());\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n\r\n    body: JSON.stringify(values),\r\n  };\r\n\r\n  fetch(\"/user/login\", requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data.token) {\r\n        localStorage.setItem(\"token\", `Bearer ${data.token}`);\r\n        localStorage.setItem(\"userProfile\", JSON.stringify(data.payload.user));\r\n        localStorage.setItem(\"profileID\", data.payload.profileID);\r\n        dispatch(receiveLogin(data.payload.user, data.payload.profileID));\r\n        // history.push(\"/studentHome\");\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      dispatch(loginError());\r\n    });\r\n};\r\n\r\nexport const signUpUser = (values) => (dispatch) => {\r\n  dispatch(requestsignup());\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(values),\r\n  };\r\n  fetch(\"/user/signup\", requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data.token) {\r\n        localStorage.setItem(\"token\", `Bearer ${data.token}`);\r\n        localStorage.setItem('userProfile', JSON.stringify(data.payload.user));\r\n        localStorage.setItem('profileID', data.payload.profileID);\r\n        dispatch(receiveSignup(data.user));\r\n        // history.push(\"/studentHome\");\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error)\r\n      dispatch(signupError());\r\n    });\r\n};\r\n\r\nexport const accountCreated = () => (dispatch) => {\r\n  dispatch(userAccountCreated());\r\n};\r\n\r\n// export const signupUser = (displayName, email, password, password2) => dispatch => {\r\n//   dispatch(requestsignup());\r\n//   //verifying password and name.\r\n//   if(displayName.length < 3){\r\n//     return dispatch(signupError(\"Name must have atleast 3 characters.\"));\r\n//   }\r\n\r\n//   if(displayName.length > 50){\r\n//     return dispatch(signupError(\"Name must have atmost 50 characters.\"));\r\n//   }\r\n\r\n//   if(!/^[a-zA-Z ]*$/.test(displayName)){\r\n//     return dispatch(signupError(\"Name must contain only alphabets.\"));\r\n//   }\r\n\r\n//   if(password !== password2){\r\n//     return dispatch(signupError(\"Passwords do not match\"));\r\n//   }\r\n\r\n// };\r\n\r\nexport const logoutUser = () => (dispatch) => {\r\n  dispatch(requestLogout());\r\n  dispatch(receiveLogout());\r\n};\r\n\r\n// export const verifyAuth = () => dispatch => {\r\n//   dispatch(verifyRequest());\r\n//   myFirebase.auth().onAuthStateChanged(user => {\r\n//     if (user !== null) {\r\n//       dispatch(receiveLogin(user));\r\n//     }\r\n//     dispatch(verifySuccess());\r\n//   });\r\n// };\r\n\r\n// export const sendPasswordResetLink = (email) => dispatch => {\r\n//   dispatch(sendingPassReset());\r\n//   myFirebase.auth().sendPasswordResetEmail(email)\r\n//   .then(()=>{\r\n//     dispatch(sendPassResetSuccess());\r\n//   })\r\n//   .catch(error=>{\r\n//     console.error(error);\r\n//     switch(error.code){\r\n//       case 'auth/invalid-email':\r\n//         dispatch(sendPassResetError(\"Invalid email address.\"));\r\n//         break;\r\n//       case 'auth/user-not-found':\r\n//         dispatch(sendPassResetError(\"User not found with the given email address.\"));\r\n//         break;\r\n//       default:\r\n//         dispatch(sendPassResetError(\"Failed to send password reset email.\"));\r\n//     }\r\n//   })\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}