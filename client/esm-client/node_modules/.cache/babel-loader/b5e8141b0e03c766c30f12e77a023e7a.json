{"ast":null,"code":"import { logoutUser } from \"./authActions\";\nexport const FETCH_TEST_REQUEST = \"FETCH_TEST_REQUEST\";\nexport const FETCH_TEST_SUCCESS = \"FETCH_TEST_SUCCESS\";\nexport const FETCH_ATTEMPT_TEST_SUCCESS = \"FETCH_ATTEMPT_TEST_SUCCESS\";\nexport const FETCH_TEST_FAILURE = \"FETCH_TEST_FAILURE\";\nexport const SUBMIT_TEST_FAILURE = \"SUBMIT_TEST_FAILURE\";\nexport const SUBMIT_TEST_SUCCESS = \"SUBMIT_TEST_SUCCESS\"; // Teacher action types\n\nexport const FETCH_TEACHER_TEST_REQUEST = \"FETCH_TEACHER_TEST_REQUEST\";\nexport const FETCH_TEACHER_TEST_SUCCESS = \"FETCH_TEACHER_TEST_SUCCESS\";\nexport const FETCH_TEACHER_TEST_FAILURE = \"FETCH_TEACHER_TEST_FAILURE\";\n\nconst requestTests = () => {\n  return {\n    type: FETCH_TEST_REQUEST\n  };\n};\n\nconst receiveTests = tests => {\n  return {\n    type: FETCH_TEST_SUCCESS,\n    tests\n  };\n};\n\nconst testsError = errorData => {\n  return {\n    type: FETCH_TEST_FAILURE\n  };\n};\n\nconst requestTeacherTests = () => {\n  return {\n    type: FETCH_TEACHER_TEST_REQUEST\n  };\n};\n\nconst receiveTeacherTests = tests => {\n  return {\n    type: FETCH_TEACHER_TEST_SUCCESS,\n    tests\n  };\n};\n\nconst testsTeacherError = () => {\n  return {\n    type: FETCH_TEACHER_TEST_FAILURE\n  };\n};\n\nconst testSubmitError = () => {\n  return {\n    type: SUBMIT_TEST_FAILURE\n  };\n};\n\nconst testSubmitted = testID => {\n  return {\n    type: SUBMIT_TEST_SUCCESS,\n    testID: testID\n  };\n};\n\nconst receiveAttemptTests = tests => {\n  return {\n    type: FETCH_ATTEMPT_TEST_SUCCESS,\n    tests\n  };\n};\n\nexport const fetchAttemptTests = profileID => async dispatch => {\n  dispatch(requestTests());\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    }\n  };\n  await fetch(`/student/attempt-tests/${profileID}`, requestOptions).then(response => response.json()).then(data => {\n    if (data) {\n      var _data$error;\n\n      if ((data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.name) === \"TokenExpiredError\") {\n        dispatch(logoutUser());\n      } else {\n        dispatch(receiveAttemptTests(data.obj));\n      }\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n    dispatch(testsError());\n  });\n};\nexport const fetchTests = className => async dispatch => {\n  dispatch(requestTests());\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    }\n  };\n  await fetch(`/student/tests/${className}`, requestOptions).then(response => response.json()).then(data => {\n    var _data$error2;\n\n    if ((data === null || data === void 0 ? void 0 : (_data$error2 = data.error) === null || _data$error2 === void 0 ? void 0 : _data$error2.name) === \"TokenExpiredError\") {\n      dispatch(logoutUser());\n    } else {\n      dispatch(receiveTests(data.obj));\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n  });\n};\nexport const submitTest = data => async dispatch => {\n  // dispatch(requestTests());\n  const {\n    testID,\n    correct,\n    unanswered,\n    totalMarks,\n    profileID,\n    testName,\n    firstName,\n    lastName,\n    wrong\n  } = data;\n  const testData = JSON.parse(localStorage.getItem(testID));\n  let submitMinutes = testData.rM;\n  const submitBy = [{\n    correct,\n    unanswered,\n    totalMarks,\n    profileID,\n    testName,\n    firstName,\n    lastName,\n    wrong,\n    submitMinutes\n  }];\n  const postedData = {\n    submitBy,\n    testID,\n    testName\n  };\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    },\n    body: JSON.stringify(postedData)\n  };\n  await fetch(`/student/submit-test/${testID}`, requestOptions).then(response => response.json()).then(data => {\n    if (data) {\n      var _data$error3;\n\n      if ((data === null || data === void 0 ? void 0 : (_data$error3 = data.error) === null || _data$error3 === void 0 ? void 0 : _data$error3.name) === \"TokenExpiredError\") {\n        dispatch(logoutUser());\n      } else {\n        dispatch(testSubmitted(testID));\n      }\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n    dispatch(testSubmitError());\n  });\n};\n/* Teacher Actions*/\n\nexport const fetchTeacherTests = profileID => async dispatch => {\n  dispatch(requestTeacherTests());\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\")\n    }\n  };\n  await fetch(`/teacher/tests/${profileID}`, requestOptions).then(response => response.json()).then(data => {\n    if (data) {\n      var _data$error4;\n\n      if ((data === null || data === void 0 ? void 0 : (_data$error4 = data.error) === null || _data$error4 === void 0 ? void 0 : _data$error4.name) === \"TokenExpiredError\") {\n        dispatch(logoutUser());\n      } else {\n        dispatch(receiveTeacherTests(data.obj));\n      }\n    }\n  }).catch(error => {\n    //Do something with the error if you want!\n    console.log(error);\n    dispatch(testsTeacherError());\n  });\n};","map":{"version":3,"sources":["D:/Final year project/project_repo/EduSync/client/esm-client/src/actions/testActions.js"],"names":["logoutUser","FETCH_TEST_REQUEST","FETCH_TEST_SUCCESS","FETCH_ATTEMPT_TEST_SUCCESS","FETCH_TEST_FAILURE","SUBMIT_TEST_FAILURE","SUBMIT_TEST_SUCCESS","FETCH_TEACHER_TEST_REQUEST","FETCH_TEACHER_TEST_SUCCESS","FETCH_TEACHER_TEST_FAILURE","requestTests","type","receiveTests","tests","testsError","errorData","requestTeacherTests","receiveTeacherTests","testsTeacherError","testSubmitError","testSubmitted","testID","receiveAttemptTests","fetchAttemptTests","profileID","dispatch","requestOptions","method","headers","Authorization","localStorage","getItem","fetch","then","response","json","data","error","name","obj","catch","console","log","fetchTests","className","submitTest","correct","unanswered","totalMarks","testName","firstName","lastName","wrong","testData","JSON","parse","submitMinutes","rM","submitBy","postedData","body","stringify","fetchTeacherTests"],"mappings":"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","sourcesContent":["import { logoutUser } from \"./authActions\";\r\nexport const FETCH_TEST_REQUEST = \"FETCH_TEST_REQUEST\";\r\nexport const FETCH_TEST_SUCCESS = \"FETCH_TEST_SUCCESS\";\r\nexport const FETCH_ATTEMPT_TEST_SUCCESS = \"FETCH_ATTEMPT_TEST_SUCCESS\";\r\nexport const FETCH_TEST_FAILURE = \"FETCH_TEST_FAILURE\";\r\nexport const SUBMIT_TEST_FAILURE = \"SUBMIT_TEST_FAILURE\";\r\nexport const SUBMIT_TEST_SUCCESS = \"SUBMIT_TEST_SUCCESS\";\r\n\r\n// Teacher action types\r\nexport const FETCH_TEACHER_TEST_REQUEST = \"FETCH_TEACHER_TEST_REQUEST\";\r\nexport const FETCH_TEACHER_TEST_SUCCESS = \"FETCH_TEACHER_TEST_SUCCESS\";\r\nexport const FETCH_TEACHER_TEST_FAILURE = \"FETCH_TEACHER_TEST_FAILURE\";\r\n\r\nconst requestTests = () => {\r\n  return {\r\n    type: FETCH_TEST_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveTests = (tests) => {\r\n  return {\r\n    type: FETCH_TEST_SUCCESS,\r\n    tests,\r\n  };\r\n};\r\n\r\nconst testsError = (errorData) => {\r\n  return {\r\n    type: FETCH_TEST_FAILURE,\r\n  };\r\n};\r\nconst requestTeacherTests = () => {\r\n  return {\r\n    type: FETCH_TEACHER_TEST_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveTeacherTests = (tests) => {\r\n  return {\r\n    type: FETCH_TEACHER_TEST_SUCCESS,\r\n    tests,\r\n  };\r\n};\r\n\r\nconst testsTeacherError = () => {\r\n  return {\r\n    type: FETCH_TEACHER_TEST_FAILURE,\r\n  };\r\n};\r\nconst testSubmitError = () => {\r\n  return {\r\n    type: SUBMIT_TEST_FAILURE,\r\n  };\r\n};\r\nconst testSubmitted = (testID) => {\r\n  return {\r\n    type: SUBMIT_TEST_SUCCESS,\r\n    testID: testID,\r\n  };\r\n};\r\n\r\nconst receiveAttemptTests = (tests) => {\r\n  return {\r\n    type: FETCH_ATTEMPT_TEST_SUCCESS,\r\n    tests,\r\n  };\r\n};\r\n\r\nexport const fetchAttemptTests = (profileID) => async (dispatch) => {\r\n  dispatch(requestTests());\r\n\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n  };\r\n\r\n  await fetch(`/student/attempt-tests/${profileID}`, requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data) {\r\n        if (data?.error?.name === \"TokenExpiredError\") {\r\n          dispatch(logoutUser());\r\n        } else {\r\n          dispatch(receiveAttemptTests(data.obj));\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error);\r\n      dispatch(testsError());\r\n    });\r\n};\r\n\r\nexport const fetchTests = (className) => async (dispatch) => {\r\n  dispatch(requestTests());\r\n\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n  };\r\n\r\n  await fetch(`/student/tests/${className}`, requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data?.error?.name === \"TokenExpiredError\") {\r\n        dispatch(logoutUser());\r\n      } else {\r\n        dispatch(receiveTests(data.obj));\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error);\r\n    });\r\n};\r\n\r\nexport const submitTest = (data) => async (dispatch) => {\r\n  // dispatch(requestTests());\r\n  const {\r\n    testID,\r\n    correct,\r\n    unanswered,\r\n    totalMarks,\r\n    profileID,\r\n    testName,\r\n    firstName,\r\n    lastName,\r\n    wrong,\r\n  } = data;\r\n  const testData = JSON.parse(localStorage.getItem(testID));\r\n  let submitMinutes = testData.rM;\r\n  const submitBy = [\r\n    {\r\n      correct,\r\n      unanswered,\r\n      totalMarks,\r\n      profileID,\r\n      testName,\r\n      firstName,\r\n      lastName,\r\n      wrong,\r\n      submitMinutes,\r\n    },\r\n  ];\r\n\r\n  const postedData = {\r\n    submitBy,\r\n    testID,\r\n    testName,\r\n  };\r\n\r\n  const requestOptions = {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n    body: JSON.stringify(postedData),\r\n  };\r\n\r\n  await fetch(`/student/submit-test/${testID}`, requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data) {\r\n        if (data?.error?.name === \"TokenExpiredError\") {\r\n          dispatch(logoutUser());\r\n        } else {\r\n          dispatch(testSubmitted(testID));\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error);\r\n      dispatch(testSubmitError());\r\n    });\r\n};\r\n\r\n/* Teacher Actions*/\r\n\r\nexport const fetchTeacherTests = (profileID) => async (dispatch) => {\r\n  dispatch(requestTeacherTests());\r\n\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"token\"),\r\n    },\r\n  };\r\n\r\n  await fetch(`/teacher/tests/${profileID}`, requestOptions)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data) {\r\n        if (data?.error?.name === \"TokenExpiredError\") {\r\n          dispatch(logoutUser());\r\n        } else {\r\n          dispatch(receiveTeacherTests(data.obj));\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //Do something with the error if you want!\r\n      console.log(error);\r\n      dispatch(testsTeacherError());\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}